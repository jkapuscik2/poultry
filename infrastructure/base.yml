AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample with PHP on Ubuntu'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUsername:
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  BucketName:
    Type: String
Resources:
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Grant database access to web server
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: WebDMZ
  WebDMZ:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and WEB access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      AllowMajorVersionUpgrade: 'false'
      AutoMinorVersionUpgrade: 'true'
      DBInstanceClass: db.t2.micro
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      Engine: mysql
      EngineVersion: 8.0.30
      DBSecurityGroups:
        - Ref: DBSecurityGroup
  RDSAcessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}/*
  WebAppProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref RDSAcessRole
  WebAppConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Metadata:
        AWS::CloudFormation::Init:
          config:
            packages:
              apt:
                nginx: []
                composer: []
                zip: []
            sources:
              /var/www/poultry: "https://github.com/jkapuscik2/poultry/zipball/master"
      DependsOn: Database
      Properties:
        InstanceType: t2.micro
        IamInstanceProfile: !Ref WebAppProfile
        SecurityGroups:
          - Ref: WebDMZ
        KeyName:
          Ref: KeyName
        ImageId: ami-02df9ea15c1778c9c
        UserData:
          Fn::Base64:
            !Sub
            - |
                #!/bin/bash

                sudo apt-get -y update
                sudo apt-get install -y software-properties-common
                sudo add-apt-repository ppa:ondrej/php -y
                sudo apt-get -y update
                sudo apt-get -y remove apache2
                sudo apt-get install -y php7.3 php7.3-fpm php7.3-common php7.3-mysql php7.3-gd php7.3-xml php7.3-mbstring php7.3-zip
                cd /home/ubuntu
                mkdir aws-cfn-bootstrap-latest
                curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1
                apt-get install python-pip -y
                pip install aws-cfn-bootstrap-latest/
                cfn-init --verbose --stack ${AWS::StackName} --resource WebAppConfiguration --region ${AWS::Region}
                cd /var/www/poultry
                export COMPOSER_HOME="$HOME/.config/composer";
                composer install --optimize-autoloader --no-dev
                chown www-data:www-data /var/www -R
                sudo find /var/www/poultry -type f -exec chmod 644 {} \;
                sudo find /var/www/poultry -type d -exec chmod 755 {} \;
                sudo chown -R www-data:www-data /var/www/poultry/vendor
                sudo chown -R www-data:www-data /var/www/poultry/storage
                cp /var/www/poultry/infrastructure/default /etc/nginx/sites-available/default
                cd /var/www/poultry
                cp .env.example .env
                sed -i s/DB_HOST=127.0.0.1/DB_HOST=${DB_ENDPOINT}/g .env
                sed -i s/DB_USERNAME=/DB_USERNAME=${DB_USERNAME}/g .env
                sed -i s/DB_PASSWORD=/DB_PASSWORD=${DB_PASSWORD}/g .env
                sed -i s/DB_DATABASE=/DB_DATABASE=${DB_DATABASE}/g .env
                sed -i s/AWS_BUCKET=/AWS_BUCKET=${AWS_BUCKET}/g .env
                sed -i s/AWS_DEFAULT_REGION=/AWS_DEFAULT_REGION=${AWS::Region}/g .env
                php artisan migrate

                service nginx restart

                cd /home/ubuntu
                apt install -y ruby
                wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
                chmod +x ./install
                ./install auto
                systemctl start codedeploy-agent
            - DB_ENDPOINT:
                Fn::GetAtt:
                  - Database
                  - Endpoint.Address
              DB_USERNAME: !Ref DBUsername
              DB_DATABASE: !Ref DBName
              DB_PASSWORD: !Ref DBPassword
              AWS_BUCKET: !Ref BucketName
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        Fn::GetAZs:
          !Ref AWS::Region
      HealthCheck:
        HealthyThreshold: 5
        Interval: 20
        Target: HTTP:80/
        Timeout: 10
        UnhealthyThreshold: 2
      CrossZone: 'true'
      Listeners:
        - InstancePort: 80
          LoadBalancerPort: 80
          Protocol: HTTP
          InstanceProtocol: HTTP
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebAppConfiguration
      AvailabilityZones:
        Fn::GetAZs:
          !Ref AWS::Region
      MinSize: 2
      MaxSize: 10
      Tags:
        - Key: app
          Value: poultry
          PropagateAtLaunch: true
      LoadBalancerNames:
        - !Ref LoadBalancer
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 40% for 1 minute
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 40
      AlarmActions:
        - Ref: WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 20% for 1 minute
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      AlarmActions:
        - Ref: WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold
Outputs:
  DBEndpoint:
    Description: Connection endpoint of RDS
    Value:
      Fn::GetAtt:
        - Database
        - Endpoint.Address
  URL:
    Description: The URL of the load balancer
    Value:
      Fn::Join:
        - ''
        - - http://
          - Fn::GetAtt:
              - LoadBalancer
              - DNSName
